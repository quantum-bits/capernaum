# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

"""Top-level grouping of questions in Capernaum; contains indices"""
type SurveyDimension {
  """Unique ID for this entity"""
  id: Int!
  survey: Survey!
  surveyIndices: [SurveyIndex!]!

  """Title of this dimension (e.g., 'Focus on Prayer')"""
  title: String!
}

type SurveyDimensionDeleteOutput {
  """ID of deleted dimension"""
  deletedDimensionId: Int!

  """IDs of all deleted indices"""
  deletedIndexIds: [Int!]!

  """IDs of all items no longer associated with any deleted index"""
  deletedItemIds: [Int!]!
}

"""Scripture engagement practice"""
type ScriptureEngagementPractice {
  """Unique ID for this entity"""
  id: Int!

  """Practice title"""
  title: String!

  """Description of this practice"""
  description: String!

  """URL for more information on practice"""
  moreInfoUrl: String!

  """Include this SEP in prediction counts?"""
  forPredictionCounts: Boolean!

  """Survey indices for this SEP"""
  surveyIndices: [SurveyIndex!]!
}

"""Collection of survey items, grouped for analysis"""
type SurveyIndex {
  """Unique ID for this entity"""
  id: Int!
  surveyDimension: SurveyDimension!

  """Use this index in prediction tables?"""
  useForPredictions: Boolean!
  surveyItems: [SurveyItem!]!

  """Practices predicted by this index"""
  scriptureEngagementPractices: [ScriptureEngagementPractice!]!

  """Abbreviation for this index (e.g., 'FOG')"""
  abbreviation: String!

  """Title of this index"""
  title: String!
}

type SurveyIndexDeleteOutput {
  """ID of deleted index"""
  deletedIndexId: Int!

  """IDs of items removed from the deleted index"""
  deletedItemIds: [Int!]!
}

type Group {
  """Unique ID for this entity"""
  id: Int!

  """Group name"""
  name: String!
  type: GroupType!

  """Name for 'other' type """
  otherTypeName: String

  """Date when survey created"""
  created: DateTime!

  """Date when survey closes"""
  closedAfter: DateTime!

  """Group report sent"""
  reportSent: DateTime

  """Group administrator first name"""
  adminFirstName: String!

  """Group administrator last name"""
  adminLastName: String!

  """Group administrator email address"""
  adminEmail: String!

  """Survey code word used by group"""
  codeWord: String!

  """Comments from administrator"""
  adminComments: String!

  """Planned invitee count"""
  plannedInvitees: Int!
  survey: Survey!

  """Responses by this group"""
  surveyResponses: [SurveyResponse!]
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type GroupType {
  """Unique ID for this entity"""
  id: Int!

  """Group name (e.g., 'Small Group')"""
  name: String!

  """Group code (e.g., 'small-group')"""
  code: String!

  """Sequence number"""
  seq: Int!
  groups: [Group!]!
}

"""One user's response to a survey"""
type SurveyResponse {
  """Unique ID for this entity"""
  id: Int!

  """Group for this response (if any)"""
  group: Group

  """Survey for which this is a response"""
  survey: Survey!

  """Responses to individual items in the survey"""
  surveyItemResponses: [SurveyItemResponse!]!

  """Respondent's email address"""
  email: String!

  """Group code word"""
  codeWord: String!

  """Qualtrics response ID (e.g., R_...)"""
  qualtricsResponseId: String!

  """When survey was started"""
  startDate: String!

  """When survey was completed"""
  endDate: String!

  """When survey was recorded"""
  recordedDate: String!

  """Type of response"""
  status: Int!

  """Percent complete"""
  progress: Int!

  """Time to complete (seconds)"""
  duration: Int!

  """1 = Survey complete and submitted, 0 = otherwise"""
  finished: Int!

  """Respondent's IP address"""
  ipAddress: String!

  """Respondent's latitude"""
  latitude: String!

  """Respondent's longitude"""
  longitude: String!
}

"""One user's response to a single survey question"""
type SurveyItemResponse {
  """Unique ID for this entity"""
  id: Int!
  surveyResponse: SurveyResponse!
  surveyItem: SurveyItem!

  """Qualtrics question label"""
  label: String!

  """Qualtrics question response"""
  value: Int!
}

"""One item (question) from a survey"""
type SurveyItem {
  """Unique ID for this entity"""
  id: Int!
  survey: Survey!
  surveyIndex: SurveyIndex
  surveyItemResponses: [SurveyItemResponse!]!

  """Qualtrics identifier (value of key in `questions` object)"""
  qualtricsId: String!

  """Qualtrics `questionName` field"""
  qualtricsName: String

  """Qualtrics `questionText` field"""
  qualtricsText: String!
}

type LetterType {
  """Unique ID for this entity"""
  id: Int!

  """Letter type name"""
  key: String!

  """Letter type description"""
  description: String!

  """Survey letters for this letter type"""
  surveyLetters: [SurveyLetter!]!
  letterElementTypes: [LetterElementType!]!
}

type LetterElementType {
  """Unique ID for this entity"""
  id: Int!

  """Letter element type name"""
  key: String!

  """Letter element type description"""
  description: String!
  letterTypes: [LetterType!]!
}

type Letter {
  """Unique ID for this entity"""
  id: Int!

  """Letter title"""
  title: String!

  """Description of letter"""
  description: String!

  """Email message to go out with letter"""
  emailMessage: String!

  """Date created"""
  created: DateTime!

  """Date last updated"""
  updated: DateTime!

  """Survey letters for this letter"""
  surveyLetters: [SurveyLetter!]!

  """Elements that make up this letter"""
  letterElements: [LetterElement!]!
}

type Image {
  """Unique ID for this entity"""
  id: Int!

  """Original name of image file"""
  originalName: String!

  """MIME encoding for this image"""
  mimeType: String!

  """Internal unique ID"""
  uuid: String!

  """Image title from user"""
  title: String!

  """Date this image added"""
  created: DateTime!

  """Date this image updated"""
  updated: DateTime!

  """Letter elements that use this image"""
  letterElements: [LetterElement!]!
  url: String!
  fullPath: String!
}

type LetterElement {
  """Unique ID for this entity"""
  id: Int!
  letter: Letter!
  letterElementType: LetterElementType!

  """sequence number"""
  sequence: Int!

  """Quill text delta"""
  textDelta: String
  image: Image
  surveyDimension: SurveyDimension
}

"""Associate survey, letter, and letter type"""
type SurveyLetter {
  """Unique ID for this entity"""
  id: Int!

  """The survey"""
  survey: Survey!

  """The letter"""
  letter: Letter!

  """The letter type"""
  letterType: LetterType!
}

"""All information about a survey imported from Qualtrics"""
type Survey {
  """Unique ID for this entity"""
  id: Int!

  """When this survey was imported from Qualtrics"""
  importedDate: DateTime

  """Survey letters for this survey"""
  surveyLetters: [SurveyLetter!]!

  """
  All the Qualtrics items for this survey; 
      for groupings, see survey dimension and index.
      Pass 'whichItems' to choose which to return (default 'All')
  """
  surveyItems(whichItems: WhichItems = All): [SurveyItem!]!
  groups: [Group!]!

  """Dimensions for this survey; groups indices, which group items."""
  surveyDimensions: [SurveyDimension!]!

  """Responses for this survey"""
  surveyResponses: [SurveyResponse!]!

  """Unique identifier for this survey on Qualtrics"""
  qualtricsId: String!

  """Name of this survey on Qualtrics"""
  qualtricsName: String!

  """Date and time at which this survey was modified on Qualtrics"""
  qualtricsModDate: String!

  """Key of response value containing email address"""
  emailKey: String!

  """Key of response value containing group code"""
  groupCodeKey: String!

  """Make this survey available to groups?"""
  okayForGroup: Boolean!

  """Public name for survey (e.g., in group sign-up)"""
  publicName: String!

  """Detailed description of this survey; mostly for group use"""
  detailedDescription: String!

  """Convenience property to retrieve SE practices"""
  scriptureEngagementPractices: [ScriptureEngagementPractice!]!
}

"""
Which items to retrieve: all, those with an index, those without an index
"""
enum WhichItems {
  All
  WithIndex
  WithoutIndex
}

type ChartEntry {
  title: String!
  value: Float!
}

type PredictionDetails {
  surveyIndexTitle: String!
  surveyIndexAbbreviation: String!
  meanResponse: Float!
}

type DimensionDetails {
  indexId: Int!
  indexTitle: String!
  meanSurveyIndex: Float!
}

type QualtricsResponseImportStats {
  importCount: Int!
  duplicateCount: Int!
  surveyResponses: [SurveyResponse!]!
}

type ItemSummary {
  id: Int!
  qualtricsId: String!
  qualtricsText: String!
  responseId: Int!
  responseLabel: String!
  responseValue: Float!
}

type IndexSummary {
  id: Int!
  title: String!
  abbreviation: String!
  meanResponse: Float!
  itemSummaries: [ItemSummary!]!
}

type DimensionSummary {
  id: Int!
  title: String!
  indexSummaries: [IndexSummary!]!
}

type SurveySummary {
  id: Int!
  title: String!
  qualtricsId: String!
  qualtricsName: String!
}

type PracticeSummary {
  id: Int!
  title: String!
  description: String!
}

type PredictionSummary {
  practiceSummary: PracticeSummary!
  predictionDetails: [PredictionDetails!]!
  predict: Boolean!
}

type ResponseSummary {
  id: Int!
  qualtricsResponseId: String!
  email: String!
  date: String!
  surveySummary: SurveySummary!
  dimensionSummaries: [DimensionSummary!]!
  predictionSummaries: [PredictionSummary!]!
}

type Envelope {
  from: String!
  to: [String!]!
}

type SendMailResponse {
  accepted: [String!]!
  rejected: [String!]!
  envelopeTime: Float!
  messageTime: Float!
  messageSize: Float!
  response: String!
  envelope: Envelope!
  messageId: String!
}

type UserRole {
  """Unique ID for this entity"""
  id: Int!

  """Role name"""
  name: String!

  """Role description"""
  description: String!
}

type User {
  """Unique ID for this entity"""
  id: Int!

  """Email address"""
  email: String!

  """First name"""
  firstName: String!

  """Last name"""
  lastName: String!
  roles: [UserRole!]!
}

type UserPayload {
  id: Float!
  firstName: String!
  lastName: String!
  email: String!
  roles: [UserRole!]!
}

type LoginResponse {
  accessToken: String!
  user: UserPayload!
}

type Event {
  """Unique ID for this entity"""
  id: Int!
  date: String!

  """event type"""
  type: String!

  """event details"""
  details: String!
}

type Machine {
  """Unique ID for this entity"""
  id: Int!

  """Machine name"""
  name: String!

  """Host name (e.g., FQDN)"""
  hostName: String!

  """Is this machine active?"""
  active: Boolean!
}

type WriterOutput {
  ok: Boolean!

  """Message to UI"""
  message: String!

  """Name of PDF file (e.g., 'abc.pdf')"""
  pdfFileName: String!

  """Relative path to PDF file (e.g., 'static/pdfs/abc.pdf')"""
  pdfRelativePath: String!

  """
  Absolute path to PDF file (e.g., '/home/capernaum/static/pdfs/abc.pdf')
  """
  pdfAbsolutePath: String!
  responseSummary: ResponseSummary
}

type QualtricsSurveyListItem {
  qualtricsId: String!
  qualtricsName: String!
  qualtricsOwnerId: String!
  qualtricsModDate: String!
  qualtricsCreationDate: String!
  qualtricsIsActive: Boolean!

  """Associated Capernaum survey, if any"""
  capernaumSurvey: Survey
}

type QualtricsOrganization {
  id: String!
  name: String!
  baseUrl: String!
  type: String!
  status: String!
  creationDate: String!
  expirationDate: String!
}

type QualtricsSubscription {
  id: String!
  scope: String!
  topics: String!
  publicationUrl: String!
  encrypted: Boolean!
  successfulCalls: Int!
}

type Query {
  readAllSurveyDimensions: [SurveyDimension!]!
  readOneSurveyDimension(id: Int!): SurveyDimension!
  surveyIndexReadAll: [SurveyIndex!]!

  """Retrieve all survey items"""
  surveyItemsReadAll: [SurveyItem!]!

  """Retrieve all survey letters"""
  surveyLetters(
    """Optional survey letter ID"""
    id: Int
  ): [SurveyLetter!]!

  """Fetch all surveys"""
  surveys: [Survey!]!
  survey(id: Int!): Survey!
  surveyResponses(groupId: Int, surveyId: Int!): [SurveyResponse!]!
  surveyResponseById(id: Int!): SurveyResponse!
  surveyResponsesForGroup(
    """Limit to one group"""
    groupId: Int
  ): [SurveyResponse!]!
  readGroups: [Group!]!
  readGroup(id: Int!): Group
  findGroupByCodeWord(codeWord: String!): Group
  readGroupTypes: [GroupType!]!
  letterElementTypes: [LetterElementType!]!
  letter(id: Int!): Letter!
  letters: [Letter!]!
  readLetterTypes: [LetterType!]!
  images: [Image!]!
  image(id: Int!): Image!
  scriptureEngagementPractice(id: Int!): ScriptureEngagementPractice!
  scriptureEngagementPractices: [ScriptureEngagementPractice!]!
  user(id: Int!): User!
  users: [User!]!
  userRoles: [UserRole!]!
  qualtricsSurveys(includeInactive: Boolean = false): [QualtricsSurveyListItem!]!
  organization(organizationId: String = "taylorcfse"): QualtricsOrganization!
  subscriptions: [QualtricsSubscription!]!
  events: [Event!]!
  machines: [Machine!]!
}

type Mutation {
  """Create a survey dimension."""
  createSurveyDimension(createInput: SurveyDimensionCreateInput!): SurveyDimension!

  """Update an existing survey dimension"""
  updateSurveyDimension(updateInput: SurveyDimensionUpdateInput!): SurveyDimension!

  """
  Delete a dimension. Also deletes indices associated with this dimension.
      Each index is removed using the equivalent of deleteSurveyIndex.
      Returns details of everything that was deleted.
  """
  deleteSurveyDimension(id: Int!): SurveyDimensionDeleteOutput!

  """Create a survey index. Can add survey items directly by item ID."""
  surveyIndexCreate(createInput: SurveyIndexCreateInput!): SurveyIndex!

  """Make changes to SE practice associations; returns updated indices"""
  updateBooleanAssociations(updates: [AssociationUpdateInput!]!): [SurveyIndex!]!

  """
  Update an index. Field values will replaces existing values in the object.
        (e.g., if you give a value for itemIds, it will replace the current list.)
  """
  updateSurveyIndex(updateInput: SurveyIndexUpdateInput!): SurveyIndex!

  """
  Delete an index. Also removes associations with items; the items are not removed.
  """
  deleteSurveyIndex(id: Int!): SurveyIndexDeleteOutput!

  """Create a new surveyLetter"""
  createSurveyLetter(surveyLetterCreateInput: SurveyLetterCreateInput!): SurveyLetter!

  """Create a new survey."""
  createSurvey(createInput: SurveyCreateInput!): Survey! @deprecated(reason: "Should only create surveys from Qualtrics")
  updateSurvey(updateInput: SurveyUpdateInput!): Survey!
  deleteSurvey(id: Int!): Int!

  """Delete a survey response"""
  deleteSurveyResponse(id: Int!): Int!
  createGroup(createInput: GroupCreateInput!): Group!
  updateGroup(updateInput: GroupUpdateInput!): Group!
  deleteGroup(id: Int!): Int!
  sendLetter(mailInput: SendMailInput!): SendMailResponse!
  createLetterElement(createInput: LetterElementCreateInput!): LetterElement!
  updateLetterElement(updateInput: LetterElementUpdateInput!): LetterElement!
  resequenceLetterElements(letterElementIds: [Int!]!): [LetterElement!]!
  deleteLetterElement(id: Int!): Int!
  createLetter(createInput: LetterCreateInput!): Letter!
  updateLetter(letterData: LetterUpdateInput!): Letter!
  deleteLetter(id: Int!): Int!
  createLetterType(createInput: LetterTypeCreateInput!): LetterType!
  updateLetterType(updateInput: LetterTypeUpdateInput!): LetterType!
  updateImage(updateInput: ImageUpdateInput!): Image!
  deleteImage(id: Int!): Int!

  """Create a scripture engagement practice"""
  createScriptureEngagementPractice(createInput: ScriptureEngagementPracticeCreateInput!): ScriptureEngagementPractice!
  updateScriptureEngagementPractice(updateData: ScriptureEngagementPracticeUpdateInput!): ScriptureEngagementPractice!
  deleteScriptureEngagementPractice(id: Int!): Int!
  login(loginCredentials: LoginCredentials!): LoginResponse!
  createUser(createInput: UserCreateInput!): User!
  updateUser(updateInput: UserUpdateInput!): User!
  changePassword(passwordInput: ChangePasswordInput!): String!
  createUserRole(createInput: UserRoleCreateInput!): UserRole!
  writeLetter(writerInput: WriterInput!): WriterOutput!

  """
  Import a survey from Qualtrics. Always use this to create a Capernaum survey.
  """
  importQualtricsSurvey(qualtricsId: String!): Survey!

  """Fetch responses to a survey"""
  importQualtricsSurveyResponses(qualtricsId: String!): QualtricsResponseImportStats!
  createSubscription(createInput: QualtricsSubscriptionCreateInput!): QualtricsSubscription!
  deleteSubscription(subscriptionId: String!): String!
  createEvent(createInput: EventCreateInput!): Event!
  createMachine(createInput: MachineCreateInput!): Machine!
  deleteMachine(id: Int!): Int!
}

"""
Data to create a new dimension. Does not embed indices. Add them with createSurveyIndex.
"""
input SurveyDimensionCreateInput {
  surveyId: Int!
  title: String!
}

input SurveyDimensionUpdateInput {
  id: Int!
  title: String
}

input SurveyIndexCreateInput {
  """ID of the dimension to contain this index"""
  surveyDimensionId: Int!

  """List of IDs of the items to include in this index."""
  itemIds: [Int!]!

  """Abbreviation for this index (e.g., 'FOG')"""
  abbreviation: String!

  """Title of this index within the dimension"""
  title: String!

  """Use this index in prediction tables?"""
  useForPredictions: Boolean!
}

"""Communicate updates to survey index-to-SE practice relationships"""
input AssociationUpdateInput {
  """Survey index ID"""
  indexId: Float!

  """SE practice ID"""
  practiceId: Float!

  """Whether index predicts practice"""
  predict: Boolean!
}

input SurveyIndexUpdateInput {
  id: Int!
  itemIds: [Int!]
  abbreviation: String
  title: String
  useForPredictions: Boolean
}

input SurveyLetterCreateInput {
  surveyId: Int!
  letterTypeId: Int!
}

input SurveyCreateInput {
  qualtricsId: String!
  qualtricsName: String!
  qualtricsModDate: String!
  emailKey: String!
  groupCodeKey: String!
  okayForGroup: Boolean!
  publicName: String!
  detailedDescription: String!
  surveyItems: [SurveyItemCreateInput!]!
}

input SurveyItemCreateInput {
  sequence: Int = -1
  qualtricsId: String!
  qualtricsText: String!
}

input SurveyUpdateInput {
  id: Int!
  qualtricsId: String
  qualtricsName: String
  qualtricsModDate: String
  emailKey: String
  groupCodeKey: String
  okayForGroup: Boolean
  publicName: String
  detailedDescription: String
}

input GroupCreateInput {
  """Group name"""
  name: String!

  """Type of group"""
  typeId: Int!

  """Name for 'other' type """
  otherTypeName: String

  """Date when survey closes"""
  closedAfter: DateTime!

  """Group administrator first name"""
  adminFirstName: String!

  """Group administrator last name"""
  adminLastName: String!

  """Group administrator email address"""
  adminEmail: String!

  """Comments from administrator"""
  adminComments: String!

  """Planned invitee count"""
  plannedInvitees: Int!
  surveyId: Int!
}

input GroupUpdateInput {
  id: Int!

  """Group name"""
  name: String

  """Type of group"""
  typeId: Int

  """Name for 'other' type """
  otherTypeName: String

  """Date when survey closes"""
  closedAfter: DateTime

  """Group administrator first name"""
  adminFirstName: String

  """Group administrator last name"""
  adminLastName: String

  """Group administrator email address"""
  adminEmail: String

  """Survey code word used by group"""
  codeWord: String

  """Comments from administrator"""
  adminComments: String

  """Planned invitee count"""
  plannedInvitees: Int
  surveyId: Int
}

input SendMailInput {
  from: String
  to: String!
  subject: String!
  textContent: String!
  htmlContent: String
  attachmentPath: String
}

input LetterElementCreateInput {
  sequence: Int!
  textDelta: String
  imageId: Int
  letterId: Int!
  letterElementTypeId: Int!
  surveyDimensionId: Int
}

input LetterElementUpdateInput {
  id: Int!
  sequence: Int
  textDelta: String
  imageId: Int
  letterElementTypeId: Int
  surveyDimensionId: Int
}

input LetterCreateInput {
  title: String!
  description: String!
  emailMessage: String!
  letterTypeId: Int!
}

input LetterUpdateInput {
  id: Int!
  title: String
  description: String
  emailMessage: String
  letterTypeId: Int
}

input LetterTypeCreateInput {
  """Human readable key"""
  key: String!

  """Description of this type"""
  description: String!
}

input LetterTypeUpdateInput {
  id: Int!

  """Human readable key"""
  key: String

  """Description of this type"""
  description: String
}

input ImageUpdateInput {
  id: Int!
  title: String!
}

input ScriptureEngagementPracticeCreateInput {
  title: String!
  description: String!
  moreInfoUrl: String!
  forPredictionCounts: Boolean!
}

input ScriptureEngagementPracticeUpdateInput {
  id: Int!
  title: String
  description: String
  moreInfoUrl: String
  forPredictionCounts: Boolean
}

input LoginCredentials {
  email: String!
  password: String!
}

input UserCreateInput {
  email: String!
  firstName: String!
  lastName: String!
  password: String!
  userRoleIds: [Int!]!
}

input UserUpdateInput {
  id: Int!
  email: String
  firstName: String
  lastName: String
  userRoleIds: [Int!]
}

input ChangePasswordInput {
  """ID of user changing password"""
  userId: Int!

  """Current (plaintext) password for validation"""
  currentPassword: String!

  """New (plaintext) password to set"""
  newPassword: String!
}

input UserRoleCreateInput {
  name: String!
  description: String!
}

input WriterInput {
  letterId: Int!
  surveyResponseId: Int!
}

input QualtricsSubscriptionCreateInput {
  hostName: String!
  subscriptionType: String!
  surveyId: String
}

input EventCreateInput {
  type: String!
  details: String!
}

input MachineCreateInput {
  name: String!
  hostName: String!
  active: Boolean!
}

type Subscription {
  newEvent: Event!
}
